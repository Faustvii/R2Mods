<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <RootNamespace>Faust.SetItems</RootNamespace>
    <RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>
  </PropertyGroup>

  <ItemGroup>
    <None Remove="itemsets_assets" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="BetterUI" Version="2.4.7" />
    <PackageReference Include="BetterUnityPlugin" Version="1.1.1" />
    <PackageReference Include="RiskOfRain2.GameLibs" Version="1.2.2-r.0" />
    <PackageReference Include="BepInEx.Analyzers" Version="1.*" PrivateAssets="all" />
    <PackageReference Include="BepInEx.Core" Version="5.4.19" />
    <PackageReference Include="BepInEx.PluginInfoProps" Version="1.*" />
    <PackageReference Include="UnityEngine.Modules" Version="2019.4.26" IncludeAssets="compile" />
  </ItemGroup>

  <Target Name="CopyFiles" BeforeTargets="Compile">
    <ItemGroup>
      <!-- This copies .cs files from Faust.Shared into Shared folder in the project, this makes it so we only have 1 dll and doesn't confuse compatability mods like RiskOfRain that tries to read mod guid from the calling Assembly which would've been Faust.Shared which doesn't have a mod -->
      <MySourceFiles Include="$(SolutionDir)\Faust.Shared\Compatability\*.cs;$(SolutionDir)\Faust.Shared\Log.cs" />
    </ItemGroup>

    <Copy SourceFiles="@(MySourceFiles)" DestinationFiles="$(ProjectDir)\Shared\%(RecursiveDir)%(Filename)%(Extension)" UseHardlinksIfPossible="true" />
  </Target>

  <ItemGroup>
    <EmbeddedResource Include="itemsets_assets" />
  </ItemGroup>

  <ItemGroup>
    <Reference Include="ItemStats">
      <HintPath>..\ItemSets\libs\ItemStats.dll</HintPath>
    </Reference>
    <Reference Include="MMHOOK_RoR2">
      <HintPath>libs\MMHOOK_RoR2.dll</HintPath>
    </Reference>
    <Reference Include="R2API">
      <HintPath>Libs\R2API.dll</HintPath>
    </Reference>
    <Reference Include="RiskOfOptions">
      <HintPath>Libs\RiskOfOptions.dll</HintPath>
    </Reference>
  </ItemGroup>

  <ItemGroup>
    <Folder Include="Properties\" />
  </ItemGroup>

  <Target Name="PostBuild" AfterTargets="PostBuildEvent">
    <Exec Command="REM First we copy the from the output folder to the NetworkWeaver folder.&#xD;&#xA;REM We store the output from robocopy in a file called robocopy which we'll delete at the end of the file.&#xD;&#xA;robocopy $(TargetDir) $(ProjectDir)\NetworkWeaver $(TargetFileName) &gt; $(TargetDir)Robocopy&#xD;&#xA;REM Then we navigate our script to the NetworkWeaver folder to make the follow up line less verbose.&#xD;&#xA;cd $(ProjectDir)\NetworkWeaver&#xD;&#xA;REM Unity.UNetWeaver.exe {path to Coremodule} {Path to Networking} {Path to output folder} {Path to the dll you want patched} {Path to all needed references for the to-be-patched dll}&#xD;&#xA;Unity.UNetWeaver.exe &quot;..\libs\UnityEngine.CoreModule.dll&quot; &quot;..\libs\UnityEngine.Networking.dll&quot; &quot;Patched/&quot;  $(TargetFileName) &quot;$(ProjectDir)\libs&quot;&#xD;&#xA;REM We store the prepatched dll disabled as a .prepatch so that you can check it if you want, but first we need to make sure that file doesn't exist already.&#xD;&#xA;IF EXIST $(TargetFileName).prepatch (&#xD;&#xA;DEL /F $(TargetFileName).prepatch&#xD;&#xA;)&#xD;&#xA;REM Then we rename the prepatched file to bla.dll.prepatch&#xD;&#xA;ren $(TargetFileName) $(TargetFileName).prepatch&#xD;&#xA;REM move our script to the Patched Folder&#xD;&#xA;cd Patched&#xD;&#xA;REM move from the current directory (.) to the projectDirectory and store the output once more to the Robocopy file.&#xD;&#xA;robocopy . $(ProjectDir)  $(TargetFileName) &gt; $(TargetDir)Robocopy&#xD;&#xA;REM Remove the patched file from the Patched folder, because the Weaver won't run if the file already exists.&#xD;&#xA;del  $(TargetFileName)&#xD;&#xA;REM Delete the holder for all robocopy output.&#xD;&#xA;del $(TargetDir)Robocopy" />
  </Target>

</Project>
